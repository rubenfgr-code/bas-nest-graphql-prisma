# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateUserInput {
  email: String!
  emailRepeat: String!
  password: String!
  passwordRepeat: String!
  username: String!
}

"""Date custom scalar type"""
scalar Date

input FindAllUsersInput {
  """Require Prisma.UserWhereUniqueInput"""
  cursor: String

  """Require Prisma.UserOrderByInput"""
  orderBy: String
  skip: Int
  take: Int

  """Require Prisma.UserWhereInput"""
  where: String
}

input FindOneRoleInput {
  id: Int
  name: String
}

input FindOneUserInput {
  email: String
  id: Int
  username: String
}

enum Gender {
  FEMALE
  MALE
}

type Mutation {
  createRole(name: String!): Role!
  createUser(createUserInput: CreateUserInput!): User!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Profile {
  birthday: Date
  firstname: String
  gender: Gender
  id: Int!
  lastname: String
}

type Query {
  role(findOneRoleInput: FindOneRoleInput!): Role
  roles: [Role!]!
  user(findOneUserInput: FindOneUserInput!): User
  users(findAllUserInput: FindAllUsersInput): [User!]!
}

type Role {
  id: Int!
  isActive: Boolean!
  name: String!
}

input UpdateProfileInput {
  birthday: Date
  firstname: String
  gender: Gender
  id: Int!
  lastname: String
}

input UpdateRoleInput {
  id: Int!
  isActive: Boolean
  name: String
}

input UpdateUserInput {
  id: Int!
  isActive: Boolean
  profile: UpdateProfileInput
  roleId: Int
  username: String
}

type User {
  createdAt: Date!
  email: String!
  id: Int!
  isActive: Boolean!
  password: String!
  profile: Profile!
  role: Role!
  updatedAt: Date!
  username: String!
}
